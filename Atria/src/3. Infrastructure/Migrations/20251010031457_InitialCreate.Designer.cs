// <auto-generated />
using System;
using Atria.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Atria.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251010031457_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Atria.Domain.Entities.CommunityContext.Comentario", b =>
                {
                    b.Property<int>("IdComentario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_COMENTARIO");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdComentario"));

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CONTEUDO");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime")
                        .HasColumnName("DATA_CRIACAO");

                    b.Property<string>("FkAutor")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FK_AUTOR");

                    b.Property<int>("FkPostagem")
                        .HasColumnType("int")
                        .HasColumnName("FK_POSTAGEM");

                    b.HasKey("IdComentario");

                    b.HasIndex("FkAutor");

                    b.HasIndex("FkPostagem");

                    b.ToTable("TB_COMENTARIO", (string)null);
                });

            modelBuilder.Entity("Atria.Domain.Entities.CommunityContext.Comunidade", b =>
                {
                    b.Property<int>("IdComunidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_COMUNIDADE");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdComunidade"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime")
                        .HasColumnName("DATA_CRIACAO");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DESCRICAO");

                    b.Property<string>("FkCriador")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FK_CRIADOR");

                    b.Property<bool>("IsForumGeral")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_FORUM_GERAL");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NOME");

                    b.HasKey("IdComunidade");

                    b.HasIndex("FkCriador");

                    b.ToTable("TB_COMUNIDADE", (string)null);
                });

            modelBuilder.Entity("Atria.Domain.Entities.CommunityContext.GrupoDeEstudo", b =>
                {
                    b.Property<int>("IdGrupoEstudo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_GRUPO_ESTUDO");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdGrupoEstudo"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime")
                        .HasColumnName("DATA_CRIACAO");

                    b.Property<int>("FkComunidade")
                        .HasColumnType("int")
                        .HasColumnName("FK_COMUNIDADE");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NOME");

                    b.HasKey("IdGrupoEstudo");

                    b.HasIndex("FkComunidade");

                    b.ToTable("TB_GRUPO_ESTUDO", (string)null);
                });

            modelBuilder.Entity("Atria.Domain.Entities.CommunityContext.Postagem", b =>
                {
                    b.Property<int>("IdPostagem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_POSTAGEM");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdPostagem"));

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CONTEUDO");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime")
                        .HasColumnName("DATA_CRIACAO");

                    b.Property<string>("FkAutor")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FK_AUTOR");

                    b.Property<int?>("FkComunidade")
                        .HasColumnType("int")
                        .HasColumnName("FK_COMUNIDADE");

                    b.Property<bool>("NoForumGeral")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("NO_FORUM_GERAL");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TITULO");

                    b.HasKey("IdPostagem");

                    b.HasIndex("FkAutor");

                    b.HasIndex("FkComunidade");

                    b.ToTable("TB_POSTAGEM", null, t =>
                        {
                            t.HasCheckConstraint("CHK_POSTAGEM_LOCAL", "(FK_COMUNIDADE IS NULL AND NO_FORUM_GERAL = 1) OR (FK_COMUNIDADE IS NOT NULL AND NO_FORUM_GERAL = 0)");
                        });
                });

            modelBuilder.Entity("Atria.Domain.Entities.InteractionContext.Avaliacao", b =>
                {
                    b.Property<int>("IdAvaliacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_AVALIACAO");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdAvaliacao"));

                    b.Property<DateTime>("DataAvaliacao")
                        .HasColumnType("datetime")
                        .HasColumnName("DATA_AVALIACAO");

                    b.Property<string>("FkAutor")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FK_AUTOR");

                    b.Property<int>("FkMaterial")
                        .HasColumnType("int")
                        .HasColumnName("FK_MATERIAL");

                    b.Property<decimal>("Nota")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)")
                        .HasColumnName("NOTA");

                    b.Property<string>("Resenha")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("RESENHA");

                    b.Property<string>("TextoEspecialista")
                        .HasColumnType("text")
                        .HasColumnName("TEXTO_ESPECIALISTA");

                    b.Property<string>("TipoAvaliacao")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TIPO_AVALIACAO");

                    b.HasKey("IdAvaliacao");

                    b.HasIndex("FkMaterial");

                    b.HasIndex("FkAutor", "FkMaterial")
                        .IsUnique();

                    b.ToTable("TB_AVALIACAO", (string)null);
                });

            modelBuilder.Entity("Atria.Domain.Entities.InteractionContext.Notificacao", b =>
                {
                    b.Property<int>("IdNotificacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_NOTIFICACAO");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdNotificacao"));

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CONTEUDO");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime")
                        .HasColumnName("DATA_CRIACAO");

                    b.Property<string>("FkUsuario")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FK_USUARIO");

                    b.HasKey("IdNotificacao");

                    b.HasIndex("FkUsuario");

                    b.ToTable("TB_NOTIFICACAO", (string)null);
                });

            modelBuilder.Entity("Atria.Domain.Entities.MaterialContext.ListaDeLeitura", b =>
                {
                    b.Property<int>("IdListaLeitura")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_LISTA_LEITURA");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdListaLeitura"));

                    b.Property<string>("FkCriador")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FK_CRIADOR");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NOME");

                    b.HasKey("IdListaLeitura");

                    b.HasIndex("FkCriador");

                    b.ToTable("TB_LISTA_LEITURA", (string)null);
                });

            modelBuilder.Entity("Atria.Domain.Entities.MaterialContext.Material", b =>
                {
                    b.Property<int>("IdMaterial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_MATERIAL");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdMaterial"));

                    b.Property<int>("AnoPublicacao")
                        .HasColumnType("int")
                        .HasColumnName("ANO_PUBLICACAO");

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AUTOR");

                    b.Property<string>("FkProfessorCadastro")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FK_PROFESSOR_CADASTRO");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("STATUS");

                    b.Property<string>("TipoMaterial")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TIPO_MATERIAL");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TITULO");

                    b.HasKey("IdMaterial");

                    b.HasIndex("FkProfessorCadastro");

                    b.ToTable("TB_MATERIAL", (string)null);

                    b.HasDiscriminator<string>("TipoMaterial");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Atria.Domain.Entities.UserContext.Usuario", b =>
                {
                    b.Property<string>("IdUsuario")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ID_USUARIO");

                    b.Property<string>("AreaAtuacao")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AREA_ATUACAO");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("DATA_CADASTRO");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("Matricula")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("MATRICULA");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NOME");

                    b.Property<string>("SenhaHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SENHA_HASH");

                    b.Property<string>("TipoUsuario")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TIPO_USUARIO");

                    b.HasKey("IdUsuario");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Matricula")
                        .IsUnique()
                        .HasFilter("MATRICULA IS NOT NULL");

                    b.ToTable("TB_USUARIO", (string)null);
                });

            modelBuilder.Entity("TB_LISTA_TEM_MATERIAL", b =>
                {
                    b.Property<int>("FK_LISTA_LEITURA")
                        .HasColumnType("int");

                    b.Property<int>("FK_MATERIAL")
                        .HasColumnType("int");

                    b.Property<DateTime>("DATA_ADICAO")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("DATA_ADICAO");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("DATA_ADICAO"));

                    b.HasKey("FK_LISTA_LEITURA", "FK_MATERIAL");

                    b.HasIndex("FK_MATERIAL");

                    b.ToTable("TB_LISTA_TEM_MATERIAL");
                });

            modelBuilder.Entity("Atria.Domain.Entities.MaterialContext.Artigo", b =>
                {
                    b.HasBaseType("Atria.Domain.Entities.MaterialContext.Material");

                    b.Property<string>("DOI")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DOI");

                    b.HasDiscriminator().HasValue("Artigo");
                });

            modelBuilder.Entity("Atria.Domain.Entities.MaterialContext.Livro", b =>
                {
                    b.HasBaseType("Atria.Domain.Entities.MaterialContext.Material");

                    b.Property<string>("Editora")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EDITORA");

                    b.Property<string>("ISBN")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ISBN");

                    b.HasDiscriminator().HasValue("Livro");
                });

            modelBuilder.Entity("Atria.Domain.Entities.CommunityContext.Comentario", b =>
                {
                    b.HasOne("Atria.Domain.Entities.UserContext.Usuario", "Autor")
                        .WithMany("Comentarios")
                        .HasForeignKey("FkAutor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Atria.Domain.Entities.CommunityContext.Postagem", "Postagem")
                        .WithMany("Comentarios")
                        .HasForeignKey("FkPostagem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Postagem");
                });

            modelBuilder.Entity("Atria.Domain.Entities.CommunityContext.Comunidade", b =>
                {
                    b.HasOne("Atria.Domain.Entities.UserContext.Usuario", "Criador")
                        .WithMany("ComunidadesCriadas")
                        .HasForeignKey("FkCriador")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Criador");
                });

            modelBuilder.Entity("Atria.Domain.Entities.CommunityContext.GrupoDeEstudo", b =>
                {
                    b.HasOne("Atria.Domain.Entities.CommunityContext.Comunidade", "Comunidade")
                        .WithMany("GruposDeEstudo")
                        .HasForeignKey("FkComunidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comunidade");
                });

            modelBuilder.Entity("Atria.Domain.Entities.CommunityContext.Postagem", b =>
                {
                    b.HasOne("Atria.Domain.Entities.UserContext.Usuario", "Autor")
                        .WithMany("Postagens")
                        .HasForeignKey("FkAutor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Atria.Domain.Entities.CommunityContext.Comunidade", "Comunidade")
                        .WithMany("Postagens")
                        .HasForeignKey("FkComunidade")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Autor");

                    b.Navigation("Comunidade");
                });

            modelBuilder.Entity("Atria.Domain.Entities.InteractionContext.Avaliacao", b =>
                {
                    b.HasOne("Atria.Domain.Entities.UserContext.Usuario", "Autor")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("FkAutor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Atria.Domain.Entities.MaterialContext.Material", "Material")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("FkMaterial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("Atria.Domain.Entities.InteractionContext.Notificacao", b =>
                {
                    b.HasOne("Atria.Domain.Entities.UserContext.Usuario", "Usuario")
                        .WithMany("Notificacoes")
                        .HasForeignKey("FkUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Atria.Domain.Entities.MaterialContext.ListaDeLeitura", b =>
                {
                    b.HasOne("Atria.Domain.Entities.UserContext.Usuario", "Criador")
                        .WithMany("ListasDeLeitura")
                        .HasForeignKey("FkCriador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criador");
                });

            modelBuilder.Entity("Atria.Domain.Entities.MaterialContext.Material", b =>
                {
                    b.HasOne("Atria.Domain.Entities.UserContext.Usuario", "ProfessorCadastro")
                        .WithMany("MateriaisCadastrados")
                        .HasForeignKey("FkProfessorCadastro")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProfessorCadastro");
                });

            modelBuilder.Entity("TB_LISTA_TEM_MATERIAL", b =>
                {
                    b.HasOne("Atria.Domain.Entities.MaterialContext.ListaDeLeitura", null)
                        .WithMany()
                        .HasForeignKey("FK_LISTA_LEITURA")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Atria.Domain.Entities.MaterialContext.Material", null)
                        .WithMany()
                        .HasForeignKey("FK_MATERIAL")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Atria.Domain.Entities.CommunityContext.Comunidade", b =>
                {
                    b.Navigation("GruposDeEstudo");

                    b.Navigation("Postagens");
                });

            modelBuilder.Entity("Atria.Domain.Entities.CommunityContext.Postagem", b =>
                {
                    b.Navigation("Comentarios");
                });

            modelBuilder.Entity("Atria.Domain.Entities.MaterialContext.Material", b =>
                {
                    b.Navigation("Avaliacoes");
                });

            modelBuilder.Entity("Atria.Domain.Entities.UserContext.Usuario", b =>
                {
                    b.Navigation("Avaliacoes");

                    b.Navigation("Comentarios");

                    b.Navigation("ComunidadesCriadas");

                    b.Navigation("ListasDeLeitura");

                    b.Navigation("MateriaisCadastrados");

                    b.Navigation("Notificacoes");

                    b.Navigation("Postagens");
                });
#pragma warning restore 612, 618
        }
    }
}
