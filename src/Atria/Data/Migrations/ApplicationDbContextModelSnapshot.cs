// <auto-generated />
using System;
using Atria.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Atria.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Atria.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_USUARIO");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("FALHAS_ACESSO");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext")
                        .HasColumnName("CONCURRENCY_STAMP");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DATA_CADASTRO");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("EMAIL");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("EMAIL_CONFIRMED");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("BLOQUEIO_ATIVADO");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("BLOQUEIO_FIM");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("NOME");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("NORMALIZED_EMAIL");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("NORMALIZED_USERNAME");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext")
                        .HasColumnName("SENHA_HASH");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("TELEFONE");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("TELEFONE_CONFIRMADO");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext")
                        .HasColumnName("SECURITY_STAMP");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("DOIS_FATORES_ATIVADO");

                    b.Property<string>("UserName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("USERNAME");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("UX_TB_USUARIO_EMAIL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("TB_USUARIO", (string)null);
                });

            modelBuilder.Entity("Atria.Models.Avaliacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_AVALIACAO");

                    b.Property<int>("FKMaterial")
                        .HasColumnType("int")
                        .HasColumnName("FK_MATERIAL");

                    b.Property<int>("FKUsuario")
                        .HasColumnType("int")
                        .HasColumnName("FK_USUARIO");

                    b.Property<int>("Nota")
                        .HasColumnType("int")
                        .HasColumnName("NOTA");

                    b.Property<string>("Resenha")
                        .HasColumnType("longtext")
                        .HasColumnName("RESENHA");

                    b.Property<string>("TipoAvaliacao")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TIPO_AVALIACAO");

                    b.HasKey("Id")
                        .HasName("PK_TB_AVALIACAO");

                    b.HasIndex("FKMaterial");

                    b.HasIndex("FKUsuario", "FKMaterial")
                        .IsUnique()
                        .HasDatabaseName("UX_AVALIACAO_USUARIO_MATERIAL");

                    b.ToTable("TB_AVALIACAO", (string)null);
                });

            modelBuilder.Entity("Atria.Models.Comunidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_COMUNIDADE");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DATA_CRIACAO");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext")
                        .HasColumnName("DESCRICAO");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("NOME");

                    b.HasKey("Id")
                        .HasName("PK_TB_COMUNIDADE");

                    b.ToTable("TB_COMUNIDADE", (string)null);
                });

            modelBuilder.Entity("Atria.Models.GrupoEstudo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_GRUPO");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DATA_CRIACAO");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext")
                        .HasColumnName("DESCRICAO");

                    b.Property<int?>("FKComunidade")
                        .HasColumnType("int")
                        .HasColumnName("FK_COMUNIDADE");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("NOME");

                    b.HasKey("Id")
                        .HasName("PK_TB_GRUPO_ESTUDO");

                    b.HasIndex("FKComunidade");

                    b.ToTable("TB_GRUPO_ESTUDO", (string)null);
                });

            modelBuilder.Entity("Atria.Models.ListaLeitura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_LISTA");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext")
                        .HasColumnName("DESCRICAO");

                    b.Property<int>("FKUsuario")
                        .HasColumnType("int")
                        .HasColumnName("FK_USUARIO");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("NOME");

                    b.HasKey("Id")
                        .HasName("PK_TB_LISTA_LEITURA");

                    b.HasIndex("FKUsuario");

                    b.ToTable("TB_LISTA_LEITURA", (string)null);
                });

            modelBuilder.Entity("Atria.Models.ListaTemMaterial", b =>
                {
                    b.Property<int>("FKLista")
                        .HasColumnType("int")
                        .HasColumnName("FK_LISTA");

                    b.Property<int>("FKMaterial")
                        .HasColumnType("int")
                        .HasColumnName("FK_MATERIAL");

                    b.Property<int?>("Ordem")
                        .HasColumnType("int")
                        .HasColumnName("ORDEM");

                    b.HasKey("FKLista", "FKMaterial")
                        .HasName("PK_TB_LISTA_TEM_MATERIAL");

                    b.HasIndex("FKMaterial");

                    b.ToTable("TB_LISTA_TEM_MATERIAL", (string)null);
                });

            modelBuilder.Entity("Atria.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_MATERIAL");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DATA_CRIACAO");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext")
                        .HasColumnName("DESCRICAO");

                    b.Property<int>("FKUsuarioCriador")
                        .HasColumnType("int")
                        .HasColumnName("FK_USUARIO_CRIADOR");

                    b.Property<string>("Status")
                        .HasColumnType("longtext")
                        .HasColumnName("STATUS");

                    b.Property<string>("Tipo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TIPO");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("TITULO");

                    b.HasKey("Id")
                        .HasName("PK_TB_MATERIAL");

                    b.HasIndex("FKUsuarioCriador");

                    b.ToTable("TB_MATERIAL", (string)null);
                });

            modelBuilder.Entity("Atria.Models.Postagem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_POSTAGEM");

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("CONTEUDO");

                    b.Property<DateTime>("DataPostagem")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DATA_POSTAGEM");

                    b.Property<int?>("FKComunidade")
                        .HasColumnType("int")
                        .HasColumnName("FK_COMUNIDADE");

                    b.Property<int>("FKUsuario")
                        .HasColumnType("int")
                        .HasColumnName("FK_USUARIO");

                    b.Property<bool>("NoForumGeral")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("NOFORUMGERAL");

                    b.HasKey("Id")
                        .HasName("PK_TB_POSTAGEM");

                    b.HasIndex("FKComunidade");

                    b.HasIndex("FKUsuario");

                    b.ToTable("TB_POSTAGEM", (string)null);
                });

            modelBuilder.Entity("Atria.Models.UsuarioComunidade", b =>
                {
                    b.Property<int>("FKUsuario")
                        .HasColumnType("int")
                        .HasColumnName("FK_USUARIO");

                    b.Property<int>("FKComunidade")
                        .HasColumnType("int")
                        .HasColumnName("FK_COMUNIDADE");

                    b.Property<DateTime>("DataEntrada")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DATA_ENTRADA");

                    b.HasKey("FKUsuario", "FKComunidade")
                        .HasName("PK_TB_USUARIO_COMUNIDADE");

                    b.HasIndex("FKComunidade");

                    b.ToTable("TB_USUARIO_COMUNIDADE", (string)null);
                });

            modelBuilder.Entity("Atria.Models.UsuarioGrupo", b =>
                {
                    b.Property<int>("FKUsuario")
                        .HasColumnType("int")
                        .HasColumnName("FK_USUARIO");

                    b.Property<int>("FKGrupo")
                        .HasColumnType("int")
                        .HasColumnName("FK_GRUPO");

                    b.Property<DateTime>("DataEntrada")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DATA_ENTRADA");

                    b.HasKey("FKUsuario", "FKGrupo")
                        .HasName("PK_TB_USUARIO_GRUPO");

                    b.HasIndex("FKGrupo");

                    b.ToTable("TB_USUARIO_GRUPO", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_ROLE");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext")
                        .HasColumnName("CONCURRENCY_STAMP");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("NOME");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("NORMALIZED_NOME");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("TB_ROLE", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_ROLE_CLAIM");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ROLE");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("TB_ROLE_CLAIM", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_CLAIM");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("FK_USUARIO");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TB_USER_CLAIM", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("FK_USUARIO");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("TB_USER_LOGIN", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("FK_USUARIO");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ROLE");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("TB_USER_ROLE", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("FK_USUARIO");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("TB_USER_TOKEN", (string)null);
                });

            modelBuilder.Entity("Atria.Models.Avaliacao", b =>
                {
                    b.HasOne("Atria.Models.Material", "Material")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("FKMaterial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AVALIACAO_MATERIAL");

                    b.HasOne("Atria.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("FKUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AVALIACAO_USUARIO");

                    b.Navigation("Material");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Atria.Models.GrupoEstudo", b =>
                {
                    b.HasOne("Atria.Models.Comunidade", "Comunidade")
                        .WithMany("GruposEstudo")
                        .HasForeignKey("FKComunidade")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_GRUPO_COMUNIDADE");

                    b.Navigation("Comunidade");
                });

            modelBuilder.Entity("Atria.Models.ListaLeitura", b =>
                {
                    b.HasOne("Atria.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("FKUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LISTA_USUARIO");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Atria.Models.ListaTemMaterial", b =>
                {
                    b.HasOne("Atria.Models.ListaLeitura", "ListaLeitura")
                        .WithMany("ListaTemMateriais")
                        .HasForeignKey("FKLista")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LISTATEMMATERIAL_LISTA");

                    b.HasOne("Atria.Models.Material", "Material")
                        .WithMany("ListaTemMateriais")
                        .HasForeignKey("FKMaterial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LISTATEMMATERIAL_MATERIAL");

                    b.Navigation("ListaLeitura");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("Atria.Models.Material", b =>
                {
                    b.HasOne("Atria.Models.ApplicationUser", "Criador")
                        .WithMany()
                        .HasForeignKey("FKUsuarioCriador")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_MATERIAL_USUARIO");

                    b.Navigation("Criador");
                });

            modelBuilder.Entity("Atria.Models.Postagem", b =>
                {
                    b.HasOne("Atria.Models.Comunidade", "Comunidade")
                        .WithMany("Postagens")
                        .HasForeignKey("FKComunidade")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_POSTAGEM_COMUNIDADE");

                    b.HasOne("Atria.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("FKUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_POSTAGEM_USUARIO");

                    b.Navigation("Comunidade");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Atria.Models.UsuarioComunidade", b =>
                {
                    b.HasOne("Atria.Models.Comunidade", "Comunidade")
                        .WithMany("Usuarios")
                        .HasForeignKey("FKComunidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_USUARIOCOMUNIDADE_COMUNIDADE");

                    b.HasOne("Atria.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("FKUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_USUARIOCOMUNIDADE_USUARIO");

                    b.Navigation("Comunidade");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Atria.Models.UsuarioGrupo", b =>
                {
                    b.HasOne("Atria.Models.GrupoEstudo", "GrupoEstudo")
                        .WithMany("Usuarios")
                        .HasForeignKey("FKGrupo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_USUARIOGRUPO_GRUPO");

                    b.HasOne("Atria.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("FKUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_USUARIOGRUPO_USUARIO");

                    b.Navigation("GrupoEstudo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Atria.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Atria.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Atria.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Atria.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Atria.Models.Comunidade", b =>
                {
                    b.Navigation("GruposEstudo");

                    b.Navigation("Postagens");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Atria.Models.GrupoEstudo", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Atria.Models.ListaLeitura", b =>
                {
                    b.Navigation("ListaTemMateriais");
                });

            modelBuilder.Entity("Atria.Models.Material", b =>
                {
                    b.Navigation("Avaliacoes");

                    b.Navigation("ListaTemMateriais");
                });
#pragma warning restore 612, 618
        }
    }
}
